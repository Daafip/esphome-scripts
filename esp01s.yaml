substitutions:
  # Modify variables based on your settings
  hostname: "Fan"
  devicename: fan

esphome:
  name: esp01s

esp8266:
  board: esp01_1m

## Enable logging
logger:

## Enable Home Assistant API
api:
  encryption:
    key: !secret esp01s_ota_key

ota:
  platform: esphome
  password: !secret ota_password_esp01s

wifi:
  # manual_ip:
  #   static_ip: !secret static_ip_esp01s
  #   gateway: !secret gateway
  #   subnet: !secret subnet
  networks:
  - ssid: !secret wifi_ssid_boven
    password: !secret wifi_password_boven
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password


uart:
  baud_rate: 9600
  tx_pin: GPIO1
  rx_pin: GPIO3   

switch:
  - platform: gpio
    name: "${devicename} switch"
    id: ${devicename}_relay
    pin: GPIO4 # using ESP module LED
    inverted: false
    on_turn_on:
      - uart.write: [0x0a0, 0x01, 0x01,0x0a2]
    on_turn_off:
      - uart.write: [0x0a0, 0x01, 0x00,0x0a1]

      
  # The following can be omitted
  - platform: restart
    name: ${devicename} restart

sensor:
  - platform: wifi_signal
    name: ${devicename} wifi signal
    update_interval: 600s

  # human readable uptime sensor output to the text sensor above
  # - platform: uptime
  #   name: ${devicename} Uptime in Days
  #   id: uptime_sensor_days
  #   update_interval: 60s
  #   on_raw_value:
  #     then:
  #       - text_sensor.template.publish:
  #           id: uptime_human
  #           state: !lambda |-
  #             int seconds = round(id(uptime_sensor_days).raw_state);
  #             int days = seconds / (24 * 3600);
  #             seconds = seconds % (24 * 3600);
  #             int hours = seconds / 3600;
  #             seconds = seconds % 3600;
  #             int minutes = seconds /  60;
  #             seconds = seconds % 60;
  #             return (
  #               (days ? String(days) + "d " : "") +
  #               (hours ? String(hours) + "h " : "") +
  #               (minutes ? String(minutes) + "m " : "") +
  #               (String(seconds) + "s")
  #             ).c_str();

time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: $devicename Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: $devicename IP
    bssid:
      name: $devicename BSSID

  # human readable update text sensor from sensor:uptime
  # - platform: template
  #   name: Uptime Human Readable
  #   id: uptime_human
  #   icon: mdi:clock-start
