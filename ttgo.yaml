substitutions:
  # Modify variables based on your settings
  hostname: "ttgo"
  devicename: ttgo
  battery_full: '3.764128'
  battery_empty: '2.492'
  battery_diff: '1' # '${battery_full}-${battery_empty}'


esphome:
  name: ttgo

esp32:
  board: ttgo-t7-v14-mini32
  framework:
    type: arduino

## Enable logging
logger:

## Enable Home Assistant API
api:
  encryption:
    key: !secret ttgo_ota_key

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  manual_ip:
    static_ip: !secret static_ip_ttgo
    gateway: !secret gateway
    subnet: !secret subnet
  networks:
  - ssid: !secret wifi_ssid_boven
    password: !secret wifi_password_boven
  - ssid: !secret wifi_ssid
    password: !secret wifi_password


  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: !secret wifi_password

# captive_portal:

# web_server:
#   port: 80
#   auth:
#     username: !secret web_server_username
#     password: !secret web_server_password  


switch:
  - platform: gpio
    name: "Desk lamp switch"
    id: ${devicename}_button_input_desk_lamp_switch
    pin:
      number: GPIO12
  - platform: gpio
    pin:
      number: GPIO13
    name: "Bed lamp switch"
    id: ${devicename}_button_input_bed_lamp_switch

#### to HA - legacy but funny ya know
binary_sensor:
    ## general system status
  - platform: status
    name: "Node Status"
    id: system_status
    ## desk lamp
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Desk lamp switch toggle button"
    on_press:
      then:
        - switch.toggle: ${devicename}_button_input_desk_lamp_switch
    ## bed lamp: same but different ID
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "Bed lamp switch toggle button"
    on_press:
      then:
        - switch.toggle: ${devicename}_button_input_bed_lamp_switch

sensor:
  - platform: adc
    pin: GPIO34
    name: "Battery Voltage ${devicename}"
    update_interval: 30s
    accuracy_decimals: 3
    attenuation: auto # auto is recommended, otherwise 11db
    filters:
      - multiply: 1.84
    id: battery_voltage
    entity_category: diagnostic
    unit_of_measurement: 'V'
    device_class: voltage

  - platform: template
    name: "Battery Percentage ${devicename}"
    update_interval: 30s
    accuracy_decimals: 2
    lambda: |-
        return ((id(battery_voltage).state - ${battery_empty}) / ${battery_diff} * 100.00);  
    id: battery_percentage
    entity_category: diagnostic
    unit_of_measurement: '%'
    device_class: battery
  - platform: pulse_counter
    pin: GPIO21
    update_interval : 6s
    name: "water pulse"
    id: water_pulse



### MQTT


# mqtt:
#   broker: !secret mqtt_ip
#   port: 1883
#   username: !secret mqtt_username
#   password: !secret mqtt_password
